/*
 * generated by Xtext 2.20.0
 */
package kcl.mdd.cw.sql.serializer;

import com.google.inject.Inject;
import java.util.Set;
import kcl.mdd.cw.sql.services.SimpleSQLGrammarAccess;
import kcl.mdd.cw.sql.simpleSQL.COLUMN_DEF;
import kcl.mdd.cw.sql.simpleSQL.CREATE_DB;
import kcl.mdd.cw.sql.simpleSQL.CREATE_TABLE;
import kcl.mdd.cw.sql.simpleSQL.INSERT;
import kcl.mdd.cw.sql.simpleSQL.Insert_List;
import kcl.mdd.cw.sql.simpleSQL.Model;
import kcl.mdd.cw.sql.simpleSQL.SELECT;
import kcl.mdd.cw.sql.simpleSQL.SimpleSQLPackage;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class SimpleSQLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SimpleSQLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SimpleSQLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SimpleSQLPackage.COLUMN_DEF:
				sequence_COLUMN_DEF(context, (COLUMN_DEF) semanticObject); 
				return; 
			case SimpleSQLPackage.CREATE_DB:
				sequence_CREATE_DB(context, (CREATE_DB) semanticObject); 
				return; 
			case SimpleSQLPackage.CREATE_TABLE:
				sequence_CREATE_TABLE(context, (CREATE_TABLE) semanticObject); 
				return; 
			case SimpleSQLPackage.INSERT:
				sequence_INSERT(context, (INSERT) semanticObject); 
				return; 
			case SimpleSQLPackage.INSERT_LIST:
				sequence_Insert_List(context, (Insert_List) semanticObject); 
				return; 
			case SimpleSQLPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case SimpleSQLPackage.SELECT:
				sequence_SELECT(context, (SELECT) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     COLUMN_DEF returns COLUMN_DEF
	 *
	 * Constraint:
	 *     (name=ID type=TYPE)
	 */
	protected void sequence_COLUMN_DEF(ISerializationContext context, COLUMN_DEF semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleSQLPackage.Literals.COLUMN_DEF__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleSQLPackage.Literals.COLUMN_DEF__NAME));
			if (transientValues.isValueTransient(semanticObject, SimpleSQLPackage.Literals.COLUMN_DEF__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleSQLPackage.Literals.COLUMN_DEF__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCOLUMN_DEFAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getCOLUMN_DEFAccess().getTypeTYPEEnumRuleCall_3_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns CREATE_DB
	 *     CREATE_DB returns CREATE_DB
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_CREATE_DB(ISerializationContext context, CREATE_DB semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleSQLPackage.Literals.CREATE_DB__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleSQLPackage.Literals.CREATE_DB__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCREATE_DBAccess().getNameIDTerminalRuleCall_3_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns CREATE_TABLE
	 *     CREATE_TABLE returns CREATE_TABLE
	 *
	 * Constraint:
	 *     (name=ID dbName=ID columns+=COLUMN_DEF+)
	 */
	protected void sequence_CREATE_TABLE(ISerializationContext context, CREATE_TABLE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns INSERT
	 *     INSERT returns INSERT
	 *
	 * Constraint:
	 *     (table=[CREATE_TABLE|ID] data+=Insert_List+)
	 */
	protected void sequence_INSERT(ISerializationContext context, INSERT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Insert_List returns Insert_List
	 *
	 * Constraint:
	 *     data=STRING
	 */
	protected void sequence_Insert_List(ISerializationContext context, Insert_List semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleSQLPackage.Literals.INSERT_LIST__DATA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleSQLPackage.Literals.INSERT_LIST__DATA));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInsert_ListAccess().getDataSTRINGTerminalRuleCall_1_0(), semanticObject.getData());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     statements+=Statement+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns SELECT
	 *     SELECT returns SELECT
	 *
	 * Constraint:
	 *     (name=ID? table=ID)
	 */
	protected void sequence_SELECT(ISerializationContext context, SELECT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
