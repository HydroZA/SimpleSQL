/**
 * generated by Xtext 2.20.0
 */
package kcl.mdd.cw.sql.simpleSQL.util;

import kcl.mdd.cw.sql.simpleSQL.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see kcl.mdd.cw.sql.simpleSQL.SimpleSQLPackage
 * @generated
 */
public class SimpleSQLAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static SimpleSQLPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SimpleSQLAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = SimpleSQLPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SimpleSQLSwitch<Adapter> modelSwitch =
    new SimpleSQLSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseStatement(Statement object)
      {
        return createStatementAdapter();
      }
      @Override
      public Adapter caseSELECT(SELECT object)
      {
        return createSELECTAdapter();
      }
      @Override
      public Adapter caseCREATE_DB(CREATE_DB object)
      {
        return createCREATE_DBAdapter();
      }
      @Override
      public Adapter caseCREATE_TABLE(CREATE_TABLE object)
      {
        return createCREATE_TABLEAdapter();
      }
      @Override
      public Adapter caseCOLUMN_DEF(COLUMN_DEF object)
      {
        return createCOLUMN_DEFAdapter();
      }
      @Override
      public Adapter caseINSERT(INSERT object)
      {
        return createINSERTAdapter();
      }
      @Override
      public Adapter caseInsert_List(Insert_List object)
      {
        return createInsert_ListAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link kcl.mdd.cw.sql.simpleSQL.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see kcl.mdd.cw.sql.simpleSQL.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link kcl.mdd.cw.sql.simpleSQL.Statement <em>Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see kcl.mdd.cw.sql.simpleSQL.Statement
   * @generated
   */
  public Adapter createStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link kcl.mdd.cw.sql.simpleSQL.SELECT <em>SELECT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see kcl.mdd.cw.sql.simpleSQL.SELECT
   * @generated
   */
  public Adapter createSELECTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link kcl.mdd.cw.sql.simpleSQL.CREATE_DB <em>CREATE DB</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see kcl.mdd.cw.sql.simpleSQL.CREATE_DB
   * @generated
   */
  public Adapter createCREATE_DBAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link kcl.mdd.cw.sql.simpleSQL.CREATE_TABLE <em>CREATE TABLE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see kcl.mdd.cw.sql.simpleSQL.CREATE_TABLE
   * @generated
   */
  public Adapter createCREATE_TABLEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link kcl.mdd.cw.sql.simpleSQL.COLUMN_DEF <em>COLUMN DEF</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see kcl.mdd.cw.sql.simpleSQL.COLUMN_DEF
   * @generated
   */
  public Adapter createCOLUMN_DEFAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link kcl.mdd.cw.sql.simpleSQL.INSERT <em>INSERT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see kcl.mdd.cw.sql.simpleSQL.INSERT
   * @generated
   */
  public Adapter createINSERTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link kcl.mdd.cw.sql.simpleSQL.Insert_List <em>Insert List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see kcl.mdd.cw.sql.simpleSQL.Insert_List
   * @generated
   */
  public Adapter createInsert_ListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //SimpleSQLAdapterFactory
