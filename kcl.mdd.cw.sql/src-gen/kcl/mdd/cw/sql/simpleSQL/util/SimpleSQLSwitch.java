/**
 * generated by Xtext 2.20.0
 */
package kcl.mdd.cw.sql.simpleSQL.util;

import kcl.mdd.cw.sql.simpleSQL.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see kcl.mdd.cw.sql.simpleSQL.SimpleSQLPackage
 * @generated
 */
public class SimpleSQLSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static SimpleSQLPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SimpleSQLSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = SimpleSQLPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case SimpleSQLPackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleSQLPackage.STATEMENT:
      {
        Statement statement = (Statement)theEObject;
        T result = caseStatement(statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleSQLPackage.SELECT:
      {
        SELECT select = (SELECT)theEObject;
        T result = caseSELECT(select);
        if (result == null) result = caseStatement(select);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleSQLPackage.UPDATE:
      {
        UPDATE update = (UPDATE)theEObject;
        T result = caseUPDATE(update);
        if (result == null) result = caseStatement(update);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleSQLPackage.DELETE:
      {
        DELETE delete = (DELETE)theEObject;
        T result = caseDELETE(delete);
        if (result == null) result = caseStatement(delete);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleSQLPackage.CREATE_DB:
      {
        CREATE_DB creatE_DB = (CREATE_DB)theEObject;
        T result = caseCREATE_DB(creatE_DB);
        if (result == null) result = caseStatement(creatE_DB);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleSQLPackage.CREATE_TABLE:
      {
        CREATE_TABLE creatE_TABLE = (CREATE_TABLE)theEObject;
        T result = caseCREATE_TABLE(creatE_TABLE);
        if (result == null) result = caseStatement(creatE_TABLE);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleSQLPackage.COLUMN_DEF:
      {
        COLUMN_DEF columN_DEF = (COLUMN_DEF)theEObject;
        T result = caseCOLUMN_DEF(columN_DEF);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleSQLPackage.INSERT:
      {
        INSERT insert = (INSERT)theEObject;
        T result = caseINSERT(insert);
        if (result == null) result = caseStatement(insert);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpleSQLPackage.INSERT_LIST:
      {
        Insert_List insert_List = (Insert_List)theEObject;
        T result = caseInsert_List(insert_List);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatement(Statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>SELECT</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>SELECT</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSELECT(SELECT object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>UPDATE</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>UPDATE</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUPDATE(UPDATE object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DELETE</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DELETE</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDELETE(DELETE object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>CREATE DB</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>CREATE DB</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCREATE_DB(CREATE_DB object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>CREATE TABLE</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>CREATE TABLE</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCREATE_TABLE(CREATE_TABLE object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>COLUMN DEF</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>COLUMN DEF</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCOLUMN_DEF(COLUMN_DEF object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>INSERT</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>INSERT</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseINSERT(INSERT object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Insert List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Insert List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInsert_List(Insert_List object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //SimpleSQLSwitch
