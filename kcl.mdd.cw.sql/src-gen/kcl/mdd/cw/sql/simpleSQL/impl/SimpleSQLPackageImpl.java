/**
 * generated by Xtext 2.20.0
 */
package kcl.mdd.cw.sql.simpleSQL.impl;

import kcl.mdd.cw.sql.simpleSQL.Insert_List;
import kcl.mdd.cw.sql.simpleSQL.Model;
import kcl.mdd.cw.sql.simpleSQL.SimpleSQLFactory;
import kcl.mdd.cw.sql.simpleSQL.SimpleSQLPackage;
import kcl.mdd.cw.sql.simpleSQL.Statement;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class SimpleSQLPackageImpl extends EPackageImpl implements SimpleSQLPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass modelEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass statementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass selectEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass updateEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass deleteEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass creatE_DBEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass creatE_TABLEEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass columN_DEFEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass insertEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass insert_ListEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum typeEEnum = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see kcl.mdd.cw.sql.simpleSQL.SimpleSQLPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private SimpleSQLPackageImpl()
  {
    super(eNS_URI, SimpleSQLFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link SimpleSQLPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static SimpleSQLPackage init()
  {
    if (isInited) return (SimpleSQLPackage)EPackage.Registry.INSTANCE.getEPackage(SimpleSQLPackage.eNS_URI);

    // Obtain or create and register package
    Object registeredSimpleSQLPackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    SimpleSQLPackageImpl theSimpleSQLPackage = registeredSimpleSQLPackage instanceof SimpleSQLPackageImpl ? (SimpleSQLPackageImpl)registeredSimpleSQLPackage : new SimpleSQLPackageImpl();

    isInited = true;

    // Create package meta-data objects
    theSimpleSQLPackage.createPackageContents();

    // Initialize created meta-data
    theSimpleSQLPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theSimpleSQLPackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(SimpleSQLPackage.eNS_URI, theSimpleSQLPackage);
    return theSimpleSQLPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getModel()
  {
    return modelEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getModel_Statements()
  {
    return (EReference)modelEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getStatement()
  {
    return statementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSELECT()
  {
    return selectEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSELECT_Name()
  {
    return (EAttribute)selectEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSELECT_Table()
  {
    return (EAttribute)selectEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getUPDATE()
  {
    return updateEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getUPDATE_Table()
  {
    return (EReference)updateEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getUPDATE_Data()
  {
    return (EReference)updateEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDELETE()
  {
    return deleteEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDELETE_Table()
  {
    return (EReference)deleteEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDELETE_Data()
  {
    return (EReference)deleteEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCREATE_DB()
  {
    return creatE_DBEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCREATE_DB_Name()
  {
    return (EAttribute)creatE_DBEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCREATE_TABLE()
  {
    return creatE_TABLEEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCREATE_TABLE_Name()
  {
    return (EAttribute)creatE_TABLEEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCREATE_TABLE_Db()
  {
    return (EReference)creatE_TABLEEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCREATE_TABLE_Columns()
  {
    return (EReference)creatE_TABLEEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCOLUMN_DEF()
  {
    return columN_DEFEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCOLUMN_DEF_Name()
  {
    return (EAttribute)columN_DEFEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCOLUMN_DEF_Type()
  {
    return (EAttribute)columN_DEFEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getINSERT()
  {
    return insertEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getINSERT_Table()
  {
    return (EReference)insertEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getINSERT_Data()
  {
    return (EReference)insertEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getInsert_List()
  {
    return insert_ListEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getInsert_List_Data()
  {
    return (EAttribute)insert_ListEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getTYPE()
  {
    return typeEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SimpleSQLFactory getSimpleSQLFactory()
  {
    return (SimpleSQLFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    modelEClass = createEClass(MODEL);
    createEReference(modelEClass, MODEL__STATEMENTS);

    statementEClass = createEClass(STATEMENT);

    selectEClass = createEClass(SELECT);
    createEAttribute(selectEClass, SELECT__NAME);
    createEAttribute(selectEClass, SELECT__TABLE);

    updateEClass = createEClass(UPDATE);
    createEReference(updateEClass, UPDATE__TABLE);
    createEReference(updateEClass, UPDATE__DATA);

    deleteEClass = createEClass(DELETE);
    createEReference(deleteEClass, DELETE__TABLE);
    createEReference(deleteEClass, DELETE__DATA);

    creatE_DBEClass = createEClass(CREATE_DB);
    createEAttribute(creatE_DBEClass, CREATE_DB__NAME);

    creatE_TABLEEClass = createEClass(CREATE_TABLE);
    createEAttribute(creatE_TABLEEClass, CREATE_TABLE__NAME);
    createEReference(creatE_TABLEEClass, CREATE_TABLE__DB);
    createEReference(creatE_TABLEEClass, CREATE_TABLE__COLUMNS);

    columN_DEFEClass = createEClass(COLUMN_DEF);
    createEAttribute(columN_DEFEClass, COLUMN_DEF__NAME);
    createEAttribute(columN_DEFEClass, COLUMN_DEF__TYPE);

    insertEClass = createEClass(INSERT);
    createEReference(insertEClass, INSERT__TABLE);
    createEReference(insertEClass, INSERT__DATA);

    insert_ListEClass = createEClass(INSERT_LIST);
    createEAttribute(insert_ListEClass, INSERT_LIST__DATA);

    // Create enums
    typeEEnum = createEEnum(TYPE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    selectEClass.getESuperTypes().add(this.getStatement());
    updateEClass.getESuperTypes().add(this.getStatement());
    deleteEClass.getESuperTypes().add(this.getStatement());
    creatE_DBEClass.getESuperTypes().add(this.getStatement());
    creatE_TABLEEClass.getESuperTypes().add(this.getStatement());
    insertEClass.getESuperTypes().add(this.getStatement());

    // Initialize classes and features; add operations and parameters
    initEClass(modelEClass, Model.class, "Model", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getModel_Statements(), this.getStatement(), null, "statements", null, 0, -1, Model.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(statementEClass, Statement.class, "Statement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(selectEClass, kcl.mdd.cw.sql.simpleSQL.SELECT.class, "SELECT", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getSELECT_Name(), ecorePackage.getEString(), "name", null, 0, 1, kcl.mdd.cw.sql.simpleSQL.SELECT.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSELECT_Table(), ecorePackage.getEString(), "table", null, 0, 1, kcl.mdd.cw.sql.simpleSQL.SELECT.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(updateEClass, kcl.mdd.cw.sql.simpleSQL.UPDATE.class, "UPDATE", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getUPDATE_Table(), this.getCREATE_TABLE(), null, "table", null, 0, 1, kcl.mdd.cw.sql.simpleSQL.UPDATE.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getUPDATE_Data(), this.getInsert_List(), null, "data", null, 0, -1, kcl.mdd.cw.sql.simpleSQL.UPDATE.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(deleteEClass, kcl.mdd.cw.sql.simpleSQL.DELETE.class, "DELETE", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getDELETE_Table(), this.getCREATE_TABLE(), null, "table", null, 0, 1, kcl.mdd.cw.sql.simpleSQL.DELETE.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDELETE_Data(), this.getInsert_List(), null, "data", null, 0, -1, kcl.mdd.cw.sql.simpleSQL.DELETE.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(creatE_DBEClass, kcl.mdd.cw.sql.simpleSQL.CREATE_DB.class, "CREATE_DB", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCREATE_DB_Name(), ecorePackage.getEString(), "name", null, 0, 1, kcl.mdd.cw.sql.simpleSQL.CREATE_DB.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(creatE_TABLEEClass, kcl.mdd.cw.sql.simpleSQL.CREATE_TABLE.class, "CREATE_TABLE", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCREATE_TABLE_Name(), ecorePackage.getEString(), "name", null, 0, 1, kcl.mdd.cw.sql.simpleSQL.CREATE_TABLE.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCREATE_TABLE_Db(), this.getCREATE_DB(), null, "db", null, 0, 1, kcl.mdd.cw.sql.simpleSQL.CREATE_TABLE.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCREATE_TABLE_Columns(), this.getCOLUMN_DEF(), null, "columns", null, 0, -1, kcl.mdd.cw.sql.simpleSQL.CREATE_TABLE.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(columN_DEFEClass, kcl.mdd.cw.sql.simpleSQL.COLUMN_DEF.class, "COLUMN_DEF", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCOLUMN_DEF_Name(), ecorePackage.getEString(), "name", null, 0, 1, kcl.mdd.cw.sql.simpleSQL.COLUMN_DEF.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCOLUMN_DEF_Type(), this.getTYPE(), "type", null, 0, 1, kcl.mdd.cw.sql.simpleSQL.COLUMN_DEF.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(insertEClass, kcl.mdd.cw.sql.simpleSQL.INSERT.class, "INSERT", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getINSERT_Table(), this.getCREATE_TABLE(), null, "table", null, 0, 1, kcl.mdd.cw.sql.simpleSQL.INSERT.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getINSERT_Data(), this.getInsert_List(), null, "data", null, 0, -1, kcl.mdd.cw.sql.simpleSQL.INSERT.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(insert_ListEClass, Insert_List.class, "Insert_List", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getInsert_List_Data(), ecorePackage.getEString(), "data", null, 0, 1, Insert_List.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Initialize enums and add enum literals
    initEEnum(typeEEnum, kcl.mdd.cw.sql.simpleSQL.TYPE.class, "TYPE");
    addEEnumLiteral(typeEEnum, kcl.mdd.cw.sql.simpleSQL.TYPE.STRING);
    addEEnumLiteral(typeEEnum, kcl.mdd.cw.sql.simpleSQL.TYPE.INT);
    addEEnumLiteral(typeEEnum, kcl.mdd.cw.sql.simpleSQL.TYPE.DOUBLE);
    addEEnumLiteral(typeEEnum, kcl.mdd.cw.sql.simpleSQL.TYPE.DATE);

    // Create resource
    createResource(eNS_URI);
  }

} //SimpleSQLPackageImpl
