/*
 * generated by Xtext 2.20.0
 */
package kcl.mdd.cw.sql.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SimpleSQLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.mdd.cw.sql.SimpleSQL.Model");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//Model:
		//	statements+=Statement*;
		@Override public ParserRule getRule() { return rule; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0() { return cStatementsStatementParserRuleCall_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.mdd.cw.sql.SimpleSQL.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSELECTParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCREATE_DBParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCREATE_TABLEParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cINSERTParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDELETEParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cUPDATEParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cINNERJOINParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cWHEREParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cORDERBYParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//Statement:
		//	SELECT | CREATE_DB | CREATE_TABLE | INSERT | DELETE | UPDATE | INNERJOIN | WHERE | ORDERBY;
		@Override public ParserRule getRule() { return rule; }
		
		//SELECT | CREATE_DB | CREATE_TABLE | INSERT | DELETE | UPDATE | INNERJOIN | WHERE | ORDERBY
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SELECT
		public RuleCall getSELECTParserRuleCall_0() { return cSELECTParserRuleCall_0; }
		
		//CREATE_DB
		public RuleCall getCREATE_DBParserRuleCall_1() { return cCREATE_DBParserRuleCall_1; }
		
		//CREATE_TABLE
		public RuleCall getCREATE_TABLEParserRuleCall_2() { return cCREATE_TABLEParserRuleCall_2; }
		
		//INSERT
		public RuleCall getINSERTParserRuleCall_3() { return cINSERTParserRuleCall_3; }
		
		//DELETE
		public RuleCall getDELETEParserRuleCall_4() { return cDELETEParserRuleCall_4; }
		
		//UPDATE
		public RuleCall getUPDATEParserRuleCall_5() { return cUPDATEParserRuleCall_5; }
		
		//INNERJOIN
		public RuleCall getINNERJOINParserRuleCall_6() { return cINNERJOINParserRuleCall_6; }
		
		//WHERE
		public RuleCall getWHEREParserRuleCall_7() { return cWHEREParserRuleCall_7; }
		
		//ORDERBY
		public RuleCall getORDERBYParserRuleCall_8() { return cORDERBYParserRuleCall_8; }
	}
	public class ORDERBYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.mdd.cw.sql.SimpleSQL.ORDERBY");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOrderKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cByKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTableCREATE_TABLECrossReference_2_0 = (CrossReference)cTableAssignment_2.eContents().get(0);
		private final RuleCall cTableCREATE_TABLEIDTerminalRuleCall_2_0_1 = (RuleCall)cTableCREATE_TABLECrossReference_2_0.eContents().get(1);
		private final Keyword cWhereKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cColAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cColCOLUMN_DEFCrossReference_4_0 = (CrossReference)cColAssignment_4.eContents().get(0);
		private final RuleCall cColCOLUMN_DEFIDTerminalRuleCall_4_0_1 = (RuleCall)cColCOLUMN_DEFCrossReference_4_0.eContents().get(1);
		
		//ORDERBY:
		//	'order' 'by' table=[CREATE_TABLE] 'where' col=[COLUMN_DEF];
		@Override public ParserRule getRule() { return rule; }
		
		//'order' 'by' table=[CREATE_TABLE] 'where' col=[COLUMN_DEF]
		public Group getGroup() { return cGroup; }
		
		//'order'
		public Keyword getOrderKeyword_0() { return cOrderKeyword_0; }
		
		//'by'
		public Keyword getByKeyword_1() { return cByKeyword_1; }
		
		//table=[CREATE_TABLE]
		public Assignment getTableAssignment_2() { return cTableAssignment_2; }
		
		//[CREATE_TABLE]
		public CrossReference getTableCREATE_TABLECrossReference_2_0() { return cTableCREATE_TABLECrossReference_2_0; }
		
		//ID
		public RuleCall getTableCREATE_TABLEIDTerminalRuleCall_2_0_1() { return cTableCREATE_TABLEIDTerminalRuleCall_2_0_1; }
		
		//'where'
		public Keyword getWhereKeyword_3() { return cWhereKeyword_3; }
		
		//col=[COLUMN_DEF]
		public Assignment getColAssignment_4() { return cColAssignment_4; }
		
		//[COLUMN_DEF]
		public CrossReference getColCOLUMN_DEFCrossReference_4_0() { return cColCOLUMN_DEFCrossReference_4_0; }
		
		//ID
		public RuleCall getColCOLUMN_DEFIDTerminalRuleCall_4_0_1() { return cColCOLUMN_DEFIDTerminalRuleCall_4_0_1; }
	}
	public class WHEREElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.mdd.cw.sql.SimpleSQL.WHERE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhereKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTableKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cInKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDbAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cDbCREATE_DBCrossReference_5_0 = (CrossReference)cDbAssignment_5.eContents().get(0);
		private final RuleCall cDbCREATE_DBIDTerminalRuleCall_5_0_1 = (RuleCall)cDbCREATE_DBCrossReference_5_0.eContents().get(1);
		private final Keyword cWhereKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColumnsKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cColumnsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cColumnsCOLUMN_DEFParserRuleCall_9_0 = (RuleCall)cColumnsAssignment_9.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//WHERE:
		//	'where' 'to' 'table' name=ID 'in' db=[CREATE_DB] 'where' 'columns' '(' columns+=COLUMN_DEF+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'where' 'to' 'table' name=ID 'in' db=[CREATE_DB] 'where' 'columns' '(' columns+=COLUMN_DEF+ ')'
		public Group getGroup() { return cGroup; }
		
		//'where'
		public Keyword getWhereKeyword_0() { return cWhereKeyword_0; }
		
		//'to'
		public Keyword getToKeyword_1() { return cToKeyword_1; }
		
		//'table'
		public Keyword getTableKeyword_2() { return cTableKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'in'
		public Keyword getInKeyword_4() { return cInKeyword_4; }
		
		//db=[CREATE_DB]
		public Assignment getDbAssignment_5() { return cDbAssignment_5; }
		
		//[CREATE_DB]
		public CrossReference getDbCREATE_DBCrossReference_5_0() { return cDbCREATE_DBCrossReference_5_0; }
		
		//ID
		public RuleCall getDbCREATE_DBIDTerminalRuleCall_5_0_1() { return cDbCREATE_DBIDTerminalRuleCall_5_0_1; }
		
		//'where'
		public Keyword getWhereKeyword_6() { return cWhereKeyword_6; }
		
		//'columns'
		public Keyword getColumnsKeyword_7() { return cColumnsKeyword_7; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_8() { return cLeftParenthesisKeyword_8; }
		
		//columns+=COLUMN_DEF+
		public Assignment getColumnsAssignment_9() { return cColumnsAssignment_9; }
		
		//COLUMN_DEF
		public RuleCall getColumnsCOLUMN_DEFParserRuleCall_9_0() { return cColumnsCOLUMN_DEFParserRuleCall_9_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_10() { return cRightParenthesisKeyword_10; }
	}
	public class INNERJOINElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.mdd.cw.sql.SimpleSQL.INNERJOIN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInnerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cJoinKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTableCREATE_TABLECrossReference_2_0 = (CrossReference)cTableAssignment_2.eContents().get(0);
		private final RuleCall cTableCREATE_TABLEIDTerminalRuleCall_2_0_1 = (RuleCall)cTableCREATE_TABLECrossReference_2_0.eContents().get(1);
		private final Keyword cOnKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//INNERJOIN:
		//	'inner' 'join' table=[CREATE_TABLE] 'on';
		@Override public ParserRule getRule() { return rule; }
		
		//'inner' 'join' table=[CREATE_TABLE] 'on'
		public Group getGroup() { return cGroup; }
		
		//'inner'
		public Keyword getInnerKeyword_0() { return cInnerKeyword_0; }
		
		//'join'
		public Keyword getJoinKeyword_1() { return cJoinKeyword_1; }
		
		//table=[CREATE_TABLE]
		public Assignment getTableAssignment_2() { return cTableAssignment_2; }
		
		//[CREATE_TABLE]
		public CrossReference getTableCREATE_TABLECrossReference_2_0() { return cTableCREATE_TABLECrossReference_2_0; }
		
		//ID
		public RuleCall getTableCREATE_TABLEIDTerminalRuleCall_2_0_1() { return cTableCREATE_TABLEIDTerminalRuleCall_2_0_1; }
		
		//'on'
		public Keyword getOnKeyword_3() { return cOnKeyword_3; }
	}
	public class SELECTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.mdd.cw.sql.SimpleSQL.SELECT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cShowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cAllKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTableIDTerminalRuleCall_3_0 = (RuleCall)cTableAssignment_3.eContents().get(0);
		
		//SELECT:
		//	'show' (name=ID | 'all') 'in' table=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'show' (name=ID | 'all') 'in' table=ID
		public Group getGroup() { return cGroup; }
		
		//'show'
		public Keyword getShowKeyword_0() { return cShowKeyword_0; }
		
		//(name=ID | 'all')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }
		
		//'all'
		public Keyword getAllKeyword_1_1() { return cAllKeyword_1_1; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//table=ID
		public Assignment getTableAssignment_3() { return cTableAssignment_3; }
		
		//ID
		public RuleCall getTableIDTerminalRuleCall_3_0() { return cTableIDTerminalRuleCall_3_0; }
	}
	public class UPDATEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.mdd.cw.sql.SimpleSQL.UPDATE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUpdateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEntryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTableCREATE_TABLECrossReference_3_0 = (CrossReference)cTableAssignment_3.eContents().get(0);
		private final RuleCall cTableCREATE_TABLEIDTerminalRuleCall_3_0_1 = (RuleCall)cTableCREATE_TABLECrossReference_3_0.eContents().get(1);
		private final Keyword cOnKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColumnsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cColsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cColsCOLUMN_DEFCrossReference_7_0 = (CrossReference)cColsAssignment_7.eContents().get(0);
		private final RuleCall cColsCOLUMN_DEFIDTerminalRuleCall_7_0_1 = (RuleCall)cColsCOLUMN_DEFCrossReference_7_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cWithKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cDataKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cLeftParenthesisKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cDataAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cDataInsert_ListParserRuleCall_12_0 = (RuleCall)cDataAssignment_12.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//UPDATE:
		//	'update' 'entry' 'in' table=[CREATE_TABLE] 'on' 'columns' '(' cols+=[COLUMN_DEF]+ ')' 'with' 'data' '('
		//	data+=Insert_List+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'update' 'entry' 'in' table=[CREATE_TABLE] 'on' 'columns' '(' cols+=[COLUMN_DEF]+ ')' 'with' 'data' '('
		//data+=Insert_List+ ')'
		public Group getGroup() { return cGroup; }
		
		//'update'
		public Keyword getUpdateKeyword_0() { return cUpdateKeyword_0; }
		
		//'entry'
		public Keyword getEntryKeyword_1() { return cEntryKeyword_1; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//table=[CREATE_TABLE]
		public Assignment getTableAssignment_3() { return cTableAssignment_3; }
		
		//[CREATE_TABLE]
		public CrossReference getTableCREATE_TABLECrossReference_3_0() { return cTableCREATE_TABLECrossReference_3_0; }
		
		//ID
		public RuleCall getTableCREATE_TABLEIDTerminalRuleCall_3_0_1() { return cTableCREATE_TABLEIDTerminalRuleCall_3_0_1; }
		
		//'on'
		public Keyword getOnKeyword_4() { return cOnKeyword_4; }
		
		//'columns'
		public Keyword getColumnsKeyword_5() { return cColumnsKeyword_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }
		
		//cols+=[COLUMN_DEF]+
		public Assignment getColsAssignment_7() { return cColsAssignment_7; }
		
		//[COLUMN_DEF]
		public CrossReference getColsCOLUMN_DEFCrossReference_7_0() { return cColsCOLUMN_DEFCrossReference_7_0; }
		
		//ID
		public RuleCall getColsCOLUMN_DEFIDTerminalRuleCall_7_0_1() { return cColsCOLUMN_DEFIDTerminalRuleCall_7_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
		
		//'with'
		public Keyword getWithKeyword_9() { return cWithKeyword_9; }
		
		//'data'
		public Keyword getDataKeyword_10() { return cDataKeyword_10; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_11() { return cLeftParenthesisKeyword_11; }
		
		//data+=Insert_List+
		public Assignment getDataAssignment_12() { return cDataAssignment_12; }
		
		//Insert_List
		public RuleCall getDataInsert_ListParserRuleCall_12_0() { return cDataInsert_ListParserRuleCall_12_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_13() { return cRightParenthesisKeyword_13; }
	}
	public class DELETEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.mdd.cw.sql.SimpleSQL.DELETE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeleteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEntryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTableCREATE_TABLECrossReference_3_0 = (CrossReference)cTableAssignment_3.eContents().get(0);
		private final RuleCall cTableCREATE_TABLEIDTerminalRuleCall_3_0_1 = (RuleCall)cTableCREATE_TABLECrossReference_3_0.eContents().get(1);
		private final Keyword cWithKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cDataKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDataAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDataInsert_ListParserRuleCall_7_0 = (RuleCall)cDataAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//DELETE:
		//	'delete' 'entry' 'to' table=[CREATE_TABLE] 'with' 'data' '(' data+=Insert_List+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'delete' 'entry' 'to' table=[CREATE_TABLE] 'with' 'data' '(' data+=Insert_List+ ')'
		public Group getGroup() { return cGroup; }
		
		//'delete'
		public Keyword getDeleteKeyword_0() { return cDeleteKeyword_0; }
		
		//'entry'
		public Keyword getEntryKeyword_1() { return cEntryKeyword_1; }
		
		//'to'
		public Keyword getToKeyword_2() { return cToKeyword_2; }
		
		//table=[CREATE_TABLE]
		public Assignment getTableAssignment_3() { return cTableAssignment_3; }
		
		//[CREATE_TABLE]
		public CrossReference getTableCREATE_TABLECrossReference_3_0() { return cTableCREATE_TABLECrossReference_3_0; }
		
		//ID
		public RuleCall getTableCREATE_TABLEIDTerminalRuleCall_3_0_1() { return cTableCREATE_TABLEIDTerminalRuleCall_3_0_1; }
		
		//'with'
		public Keyword getWithKeyword_4() { return cWithKeyword_4; }
		
		//'data'
		public Keyword getDataKeyword_5() { return cDataKeyword_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }
		
		//data+=Insert_List+
		public Assignment getDataAssignment_7() { return cDataAssignment_7; }
		
		//Insert_List
		public RuleCall getDataInsert_ListParserRuleCall_7_0() { return cDataInsert_ListParserRuleCall_7_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class CREATE_DBElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.mdd.cw.sql.SimpleSQL.CREATE_DB");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCreateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cNewKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDatabaseKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//CREATE_DB:
		//	'create' 'new' 'database' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'create' 'new' 'database' name=ID
		public Group getGroup() { return cGroup; }
		
		//'create'
		public Keyword getCreateKeyword_0() { return cCreateKeyword_0; }
		
		//'new'
		public Keyword getNewKeyword_1() { return cNewKeyword_1; }
		
		//'database'
		public Keyword getDatabaseKeyword_2() { return cDatabaseKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
	}
	public class CREATE_TABLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.mdd.cw.sql.SimpleSQL.CREATE_TABLE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCreateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cNewKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTableKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cInKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDbAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cDbCREATE_DBCrossReference_5_0 = (CrossReference)cDbAssignment_5.eContents().get(0);
		private final RuleCall cDbCREATE_DBIDTerminalRuleCall_5_0_1 = (RuleCall)cDbCREATE_DBCrossReference_5_0.eContents().get(1);
		private final Keyword cWithKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColumnsKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cColumnsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cColumnsCOLUMN_DEFParserRuleCall_9_0 = (RuleCall)cColumnsAssignment_9.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//CREATE_TABLE:
		//	'create' 'new' 'table' name=ID 'in' db=[CREATE_DB] 'with' 'columns' '(' columns+=COLUMN_DEF+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'create' 'new' 'table' name=ID 'in' db=[CREATE_DB] 'with' 'columns' '(' columns+=COLUMN_DEF+ ')'
		public Group getGroup() { return cGroup; }
		
		//'create'
		public Keyword getCreateKeyword_0() { return cCreateKeyword_0; }
		
		//'new'
		public Keyword getNewKeyword_1() { return cNewKeyword_1; }
		
		//'table'
		public Keyword getTableKeyword_2() { return cTableKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'in'
		public Keyword getInKeyword_4() { return cInKeyword_4; }
		
		//db=[CREATE_DB]
		public Assignment getDbAssignment_5() { return cDbAssignment_5; }
		
		//[CREATE_DB]
		public CrossReference getDbCREATE_DBCrossReference_5_0() { return cDbCREATE_DBCrossReference_5_0; }
		
		//ID
		public RuleCall getDbCREATE_DBIDTerminalRuleCall_5_0_1() { return cDbCREATE_DBIDTerminalRuleCall_5_0_1; }
		
		//'with'
		public Keyword getWithKeyword_6() { return cWithKeyword_6; }
		
		//'columns'
		public Keyword getColumnsKeyword_7() { return cColumnsKeyword_7; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_8() { return cLeftParenthesisKeyword_8; }
		
		//columns+=COLUMN_DEF+
		public Assignment getColumnsAssignment_9() { return cColumnsAssignment_9; }
		
		//COLUMN_DEF
		public RuleCall getColumnsCOLUMN_DEFParserRuleCall_9_0() { return cColumnsCOLUMN_DEFParserRuleCall_9_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_10() { return cRightParenthesisKeyword_10; }
	}
	public class COLUMN_DEFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.mdd.cw.sql.SimpleSQL.COLUMN_DEF");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cWithKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTYPEEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//COLUMN_DEF:
		//	name=ID 'with' 'type' type=TYPE;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'with' 'type' type=TYPE
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'with'
		public Keyword getWithKeyword_1() { return cWithKeyword_1; }
		
		//'type'
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }
		
		//type=TYPE
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//TYPE
		public RuleCall getTypeTYPEEnumRuleCall_3_0() { return cTypeTYPEEnumRuleCall_3_0; }
	}
	public class INSERTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.mdd.cw.sql.SimpleSQL.INSERT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEntryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTableCREATE_TABLECrossReference_3_0 = (CrossReference)cTableAssignment_3.eContents().get(0);
		private final RuleCall cTableCREATE_TABLEIDTerminalRuleCall_3_0_1 = (RuleCall)cTableCREATE_TABLECrossReference_3_0.eContents().get(1);
		private final Keyword cWithKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cDataKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDataAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDataInsert_ListParserRuleCall_7_0 = (RuleCall)cDataAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//INSERT:
		//	'add' 'entry' 'to' table=[CREATE_TABLE] 'with' 'data' '(' data+=Insert_List+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'add' 'entry' 'to' table=[CREATE_TABLE] 'with' 'data' '(' data+=Insert_List+ ')'
		public Group getGroup() { return cGroup; }
		
		//'add'
		public Keyword getAddKeyword_0() { return cAddKeyword_0; }
		
		//'entry'
		public Keyword getEntryKeyword_1() { return cEntryKeyword_1; }
		
		//'to'
		public Keyword getToKeyword_2() { return cToKeyword_2; }
		
		//table=[CREATE_TABLE]
		public Assignment getTableAssignment_3() { return cTableAssignment_3; }
		
		//[CREATE_TABLE]
		public CrossReference getTableCREATE_TABLECrossReference_3_0() { return cTableCREATE_TABLECrossReference_3_0; }
		
		//ID
		public RuleCall getTableCREATE_TABLEIDTerminalRuleCall_3_0_1() { return cTableCREATE_TABLEIDTerminalRuleCall_3_0_1; }
		
		//'with'
		public Keyword getWithKeyword_4() { return cWithKeyword_4; }
		
		//'data'
		public Keyword getDataKeyword_5() { return cDataKeyword_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }
		
		//data+=Insert_List+
		public Assignment getDataAssignment_7() { return cDataAssignment_7; }
		
		//Insert_List
		public RuleCall getDataInsert_ListParserRuleCall_7_0() { return cDataInsert_ListParserRuleCall_7_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class Insert_ListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.mdd.cw.sql.SimpleSQL.Insert_List");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cDataAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cDataSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cDataAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//Insert_List:
		//	'"' data=STRING | INT '"';
		@Override public ParserRule getRule() { return rule; }
		
		//'"' data=STRING | INT '"'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'"' data=STRING
		public Group getGroup_0() { return cGroup_0; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_0_0() { return cQuotationMarkKeyword_0_0; }
		
		//data=STRING
		public Assignment getDataAssignment_0_1() { return cDataAssignment_0_1; }
		
		//STRING
		public RuleCall getDataSTRINGTerminalRuleCall_0_1_0() { return cDataSTRINGTerminalRuleCall_0_1_0; }
		
		//INT '"'
		public Group getGroup_1() { return cGroup_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_0() { return cINTTerminalRuleCall_1_0; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_1_1() { return cQuotationMarkKeyword_1_1; }
	}
	
	public class TYPEElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "kcl.mdd.cw.sql.SimpleSQL.TYPE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cStringStringKeyword_0_0 = (Keyword)cStringEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIntEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIntIntKeyword_1_0 = (Keyword)cIntEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDoubleEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDoubleDoubleKeyword_2_0 = (Keyword)cDoubleEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDateEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDateDateKeyword_3_0 = (Keyword)cDateEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum TYPE:
		//	string | int | double | date;
		public EnumRule getRule() { return rule; }
		
		//string | int | double | date
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//string
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_0() { return cStringEnumLiteralDeclaration_0; }
		
		//"string"
		public Keyword getStringStringKeyword_0_0() { return cStringStringKeyword_0_0; }
		
		//int
		public EnumLiteralDeclaration getIntEnumLiteralDeclaration_1() { return cIntEnumLiteralDeclaration_1; }
		
		//"int"
		public Keyword getIntIntKeyword_1_0() { return cIntIntKeyword_1_0; }
		
		//double
		public EnumLiteralDeclaration getDoubleEnumLiteralDeclaration_2() { return cDoubleEnumLiteralDeclaration_2; }
		
		//"double"
		public Keyword getDoubleDoubleKeyword_2_0() { return cDoubleDoubleKeyword_2_0; }
		
		//date
		public EnumLiteralDeclaration getDateEnumLiteralDeclaration_3() { return cDateEnumLiteralDeclaration_3; }
		
		//"date"
		public Keyword getDateDateKeyword_3_0() { return cDateDateKeyword_3_0; }
	}
	
	private final ModelElements pModel;
	private final StatementElements pStatement;
	private final ORDERBYElements pORDERBY;
	private final WHEREElements pWHERE;
	private final INNERJOINElements pINNERJOIN;
	private final SELECTElements pSELECT;
	private final UPDATEElements pUPDATE;
	private final DELETEElements pDELETE;
	private final CREATE_DBElements pCREATE_DB;
	private final CREATE_TABLEElements pCREATE_TABLE;
	private final COLUMN_DEFElements pCOLUMN_DEF;
	private final INSERTElements pINSERT;
	private final Insert_ListElements pInsert_List;
	private final TYPEElements eTYPE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SimpleSQLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pStatement = new StatementElements();
		this.pORDERBY = new ORDERBYElements();
		this.pWHERE = new WHEREElements();
		this.pINNERJOIN = new INNERJOINElements();
		this.pSELECT = new SELECTElements();
		this.pUPDATE = new UPDATEElements();
		this.pDELETE = new DELETEElements();
		this.pCREATE_DB = new CREATE_DBElements();
		this.pCREATE_TABLE = new CREATE_TABLEElements();
		this.pCOLUMN_DEF = new COLUMN_DEFElements();
		this.pINSERT = new INSERTElements();
		this.pInsert_List = new Insert_ListElements();
		this.eTYPE = new TYPEElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("kcl.mdd.cw.sql.SimpleSQL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	statements+=Statement*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Statement:
	//	SELECT | CREATE_DB | CREATE_TABLE | INSERT | DELETE | UPDATE | INNERJOIN | WHERE | ORDERBY;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//ORDERBY:
	//	'order' 'by' table=[CREATE_TABLE] 'where' col=[COLUMN_DEF];
	public ORDERBYElements getORDERBYAccess() {
		return pORDERBY;
	}
	
	public ParserRule getORDERBYRule() {
		return getORDERBYAccess().getRule();
	}
	
	//WHERE:
	//	'where' 'to' 'table' name=ID 'in' db=[CREATE_DB] 'where' 'columns' '(' columns+=COLUMN_DEF+ ')';
	public WHEREElements getWHEREAccess() {
		return pWHERE;
	}
	
	public ParserRule getWHERERule() {
		return getWHEREAccess().getRule();
	}
	
	//INNERJOIN:
	//	'inner' 'join' table=[CREATE_TABLE] 'on';
	public INNERJOINElements getINNERJOINAccess() {
		return pINNERJOIN;
	}
	
	public ParserRule getINNERJOINRule() {
		return getINNERJOINAccess().getRule();
	}
	
	//SELECT:
	//	'show' (name=ID | 'all') 'in' table=ID;
	public SELECTElements getSELECTAccess() {
		return pSELECT;
	}
	
	public ParserRule getSELECTRule() {
		return getSELECTAccess().getRule();
	}
	
	//UPDATE:
	//	'update' 'entry' 'in' table=[CREATE_TABLE] 'on' 'columns' '(' cols+=[COLUMN_DEF]+ ')' 'with' 'data' '('
	//	data+=Insert_List+ ')';
	public UPDATEElements getUPDATEAccess() {
		return pUPDATE;
	}
	
	public ParserRule getUPDATERule() {
		return getUPDATEAccess().getRule();
	}
	
	//DELETE:
	//	'delete' 'entry' 'to' table=[CREATE_TABLE] 'with' 'data' '(' data+=Insert_List+ ')';
	public DELETEElements getDELETEAccess() {
		return pDELETE;
	}
	
	public ParserRule getDELETERule() {
		return getDELETEAccess().getRule();
	}
	
	//CREATE_DB:
	//	'create' 'new' 'database' name=ID;
	public CREATE_DBElements getCREATE_DBAccess() {
		return pCREATE_DB;
	}
	
	public ParserRule getCREATE_DBRule() {
		return getCREATE_DBAccess().getRule();
	}
	
	//CREATE_TABLE:
	//	'create' 'new' 'table' name=ID 'in' db=[CREATE_DB] 'with' 'columns' '(' columns+=COLUMN_DEF+ ')';
	public CREATE_TABLEElements getCREATE_TABLEAccess() {
		return pCREATE_TABLE;
	}
	
	public ParserRule getCREATE_TABLERule() {
		return getCREATE_TABLEAccess().getRule();
	}
	
	//COLUMN_DEF:
	//	name=ID 'with' 'type' type=TYPE;
	public COLUMN_DEFElements getCOLUMN_DEFAccess() {
		return pCOLUMN_DEF;
	}
	
	public ParserRule getCOLUMN_DEFRule() {
		return getCOLUMN_DEFAccess().getRule();
	}
	
	//INSERT:
	//	'add' 'entry' 'to' table=[CREATE_TABLE] 'with' 'data' '(' data+=Insert_List+ ')';
	public INSERTElements getINSERTAccess() {
		return pINSERT;
	}
	
	public ParserRule getINSERTRule() {
		return getINSERTAccess().getRule();
	}
	
	//Insert_List:
	//	'"' data=STRING | INT '"';
	public Insert_ListElements getInsert_ListAccess() {
		return pInsert_List;
	}
	
	public ParserRule getInsert_ListRule() {
		return getInsert_ListAccess().getRule();
	}
	
	//enum TYPE:
	//	string | int | double | date;
	public TYPEElements getTYPEAccess() {
		return eTYPE;
	}
	
	public EnumRule getTYPERule() {
		return getTYPEAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
