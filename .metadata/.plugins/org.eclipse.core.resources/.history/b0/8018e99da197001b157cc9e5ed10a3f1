/*
 * generated by Xtext 2.20.0
 */
package kcl.mdd.cw.sql.validation;

import org.eclipse.xtext.validation.Check;

import kcl.mdd.cw.sql.simpleSQL.CREATE_TABLE;
import kcl.mdd.cw.sql.simpleSQL.INSERT;
import kcl.mdd.cw.sql.simpleSQL.Model;
import kcl.mdd.cw.sql.simpleSQL.SimpleSQLPackage;
import kcl.mdd.cw.sql.simpleSQL.Statement;
import kcl.mdd.cw.sql.simpleSQL.TYPE;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class SimpleSQLValidator extends AbstractSimpleSQLValidator {
	
//	public static final INVALID_NAME = 'invalidName'
//
//	@Check
//	public void checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.getName().charAt(0))) {
//			warning("Name should start with a capital",
//					SimpleSQLPackage.Literals.GREETING__NAME,
//					INVALID_NAME);
//		}
//	}
/*    public class DomainmodelValidator extends AbstractDomainmodelValidator {
        
        @Check
        public void checkNameStartsWithCapital(Entity entity) {
            if (!Character.isUpperCase(entity.getName().charAt(0))) {
                warning("Name should start with a capital", 
                    DomainmodelPackage.Literals.TYPE__NAME);
            }
        }
    }*/
	

	@Check
	public void checkCreateTableNameStartsWithCapital(CREATE_TABLE cTbl)
	{
		if (!Character.isUpperCase(cTbl.getName().charAt(0)))
		{
			warning("Table names should start with a capital", SimpleSQLPackage.Literals.CREATE_TABLE__NAME);
		}
	}
	
	@Check
	public void checkInsertDataLengthMatchesTable(CREATE_TABLE tbl, INSERT ins)
	{
		if (tbl.getColumns().size() != ins.getData().size())
		{
			error("Amount of inserted elements does not match table", SimpleSQLPackage.Literals.INSERT__DATA);
		}
	}
	
	@Check
	public void checkInsertTypesValid(CREATE_TABLE tbl, INSERT ins)
	{
		for (int i = 0; i < tbl.getColumns().size(); i++)
		{
			String attemptedInsertData = ins.getData().get(i);
			TYPE expectedType = tbl.getColumns().get(i).getType();
			
			switch (expectedType)
			{
				case INT:
				{
					if (!isStringInteger(attemptedInsertData, radix))
				}
			}
			
		}
	}
	
    public static boolean isStringInteger(String stringToCheck {
        if(stringToCheck.isEmpty()) return false;           //Check if the string is empty
        for(int i = 0; i < stringToCheck.length(); i++) {
            if(i == 0 && stringToCheck.charAt(i) == '-') {     //Check for negative Integers
                if(stringToCheck.length() == 1) return false;
                else continue;
            }
        }
        return true;
    }
}
